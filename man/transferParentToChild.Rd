% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transferParentToChild.R
\name{transferParentToChild}
\alias{transferParentToChild}
\title{Function to transfer values from parent to child.}
\usage{
transferParentToChild(
  parentData,
  childData,
  mappingTable,
  parentToChild = TRUE,
  transferMethodFlag = "c",
  imputationObservationFlag = "I"
)
}
\arguments{
\item{parentData}{The data for animal commodity.}

\item{childData}{The data for meat commodity.}

\item{mappingTable}{The mapping table between the parent and the child.}

\item{parentToChild}{logical, if true, slaughtered animal are transferred
from animal commodity to meat, otherwise the otherway around.}

\item{transferMethodFlag}{The method flag to be assigned for the transfer.}

\item{imputationObservationFlag}{This is the flag assigned to imputation.
This is a special case when share is zero, then the observation status
flag should not be the same as the parent.}
}
\value{
An updated dataset depending on the direction of the transfer. The
    output dataset is strictly greater than the original target dataset.
}
\description{
When values transferred between parent and child, shares are applied. To
transfer parent to children, we multiply by the share in order to obtain the
share of parents used to produce the child commodity. In the reversed
direction, the values are divided by the shares.
}
\details{
An outer merge is applied for all the merge, this is to ensure no values are
omitted. Three different type of matching occur as a result and they are:

\enumerate{

\item{1. Value available in origin but not in target}{In this case, the
target is filled with the new calculated value.}

\item{2. Value present in origin and in target}{In this case, the target
cell is replaced with the new calculated value.}

\item{3. Value present in target but not in origin}{The value in the target
is retained.}

}
}
